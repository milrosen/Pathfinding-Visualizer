{"version":3,"sources":["PathfindingVis/square.tsx","PathfindingVis/index.tsx","App.tsx","index.tsx"],"names":["Square","type","handleMouseOver","index","handleClick","ref","React","createRef","useEffect","current","addEventListener","className","id","rows","cols","sqrs","i","push","twoDtoList","x","y","listToTwoD","Math","floor","getNeighbors","getMazeNeighbors","getH","start","end","x1","y1","x2","y2","sqrt","MapWithDefault","defaultValue","entries","Map","default","key","potentialReturn","undefined","this","PathfindingVis","state","board","mousedown","squareTypeSelection","isWorking","grid","match","updateBoard","value","setState","map","square","updateBatch","indexes","includes","newSquare","handleOptionChange","target","reconstructPath","cameFrom","totalPath","has","potentialCurrent","get","splice","indexOf","clearWalls","startPathfind","window","alert","openSet","closedSet","gScore","Infinity","set","fScore","intervalKey","setInterval","length","clearInterval","setTimeout","forEach","neighbor","tentative_gScore","mazeRecursiveBacktracker","stack","visited","maze","initial","random","pop","mazeNeighbors","filter","mazeNeighbor","chosen","currentWalls","wall","prevIndex","event","myLocation","changedTouches","realTarget","document","elementFromPoint","clientX","clientY","targetId","children","parseFloat","innerWidth","initAllEmpty","checked","onChange","e","onClick","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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Q,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,QAAS,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,OAAQ,QAA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","file":"static/js/main.bd0a0f5b.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { gridSquareState } from './namespace';\r\n\r\nexport default function Square({ type, handleMouseOver, index, handleClick }: { type: gridSquareState, handleMouseOver: (index: number) => void, index: number, handleClick: (index: number) => void }): JSX.Element {\r\n\tconst ref = React.createRef<HTMLDivElement>();\r\n\r\n\tuseEffect(() => {\r\n\t\tref.current?.addEventListener('mouseenter', () => handleMouseOver(index));\r\n\t\tref.current?.addEventListener('mousedown', () => handleClick(index));\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className='square' ref={ref}>\r\n\t\t\t<div className={`${type} default`} id={`${index}`}></div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { Component } from 'react';\r\nimport './index.css';\r\nimport Square from './square';\r\nimport { gridSquareState } from './namespace';\r\n\r\nlet rows = 15;\r\nlet cols = 35;\r\n\r\nconst sqrs: gridSquareState[] = [];\r\nfor (let i = 0; i < cols * rows; i++) {\r\n\tsqrs.push('empty');\r\n}\r\n\r\nconst twoDtoList = (x: number, y: number): number => {\r\n\tif (x < 0 || y < 0 || x + cols * y > rows * cols) return -1;\r\n\treturn x + cols * y;\r\n};\r\n\r\nconst listToTwoD = (index: number): { x: number, y: number } => {\r\n\tif (index > rows * cols) return { x: -1, y: -1 };\r\n\treturn { x: index % cols, y: Math.floor(index / cols) };\r\n};\r\n\r\nconst getNeighbors = (index: number): number[] => {\r\n\tconst { x, y } = listToTwoD(index);\r\n\tif (x === -1 || y === -1) return [-1, -1, -1, -1];\r\n\treturn [twoDtoList(x - 1, y),\r\n\t\t(twoDtoList(x + 1, y) % cols !== 0) ? twoDtoList(x + 1, y) : -1,\r\n\t\ttwoDtoList(x, y + 1),\r\n\t\ttwoDtoList(x, y - 1),\r\n\t];\r\n};\r\n\r\nconst getMazeNeighbors = (index: number): number[] => {\r\n\tconst { x, y } = listToTwoD(index);\r\n\tif (x === -1 || y === -1) return [-1, -1, -1, -1];\r\n\treturn [twoDtoList(x - 2, y),\r\n\t\t(twoDtoList(x + 2, y) % cols !== 0) ? twoDtoList(x + 2, y) : -1,\r\n\t\ttwoDtoList(x, y + 2),\r\n\t\ttwoDtoList(x, y - 2),\r\n\t];\r\n};\r\n\r\nconst getH = (start: number, end: number): number => {\r\n\tconst { x: x1, y: y1 } = listToTwoD(start);\r\n\tconst { x: x2, y: y2 } = listToTwoD(end);\r\n\treturn Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n\t// return Math.abs(x2 - x1) + Math.abs(y2 - y1);\r\n};\r\n\r\nclass MapWithDefault<K, V> extends Map<K, V> {\r\n\r\n\tdefault: V;\r\n\r\n\tget(key: K) {\r\n\t\tconst potentialReturn = super.get(key);\r\n\t\treturn potentialReturn !== undefined ? potentialReturn : this.default;\r\n\t}\r\n\r\n\tconstructor(defaultValue: V, entries: Map<K, V> = new Map()) {\r\n\t\tsuper(entries);\r\n\t\tthis.default = defaultValue;\r\n\t}\r\n}\r\n\r\nexport default class PathfindingVis extends Component {\r\n\r\n\tstate = {\r\n\t\tboard: ['wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'start', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'wall', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'wall', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'wall', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'wall', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'wall', 'wall', 'empty', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'empty', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'empty', 'wall', 'wall', 'wall', 'empty', 'wall', 'empty', 'wall', 'empty', 'wall', 'empty', 'wall', 'wall', 'wall', 'empty', 'wall', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'wall', 'empty', 'empty', 'empty', 'empty', 'end', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall', 'wall'] as gridSquareState[],\r\n\t\tmousedown: false,\r\n\t\tsquareTypeSelection: 'start' as gridSquareState,\r\n\t\tisWorking: false,\r\n\t}\r\n\tprivate grid = React.createRef<HTMLDivElement>();\r\n\r\n\tcomponentDidMount(): void {\r\n\t\twindow.addEventListener('mousedown', () => this.setState({ mousedown: true }));\r\n\t\twindow.addEventListener('mouseup', () => this.setState({ mousedown: false }));\r\n\t\tlet prevIndex = -1;\r\n\t\twindow.addEventListener('touchmove', (event) => {\r\n\t\t\tif (this.state.squareTypeSelection.match(/start|end/)) return;\r\n\t\t\tconst myLocation = event.changedTouches[0];\r\n\t\t\tconst realTarget = document.elementFromPoint(myLocation.clientX, myLocation.clientY);\r\n\t\t\tconst targetId = realTarget?.id || realTarget?.children[0].id;\r\n\t\t\tconst index = parseFloat(targetId || '-1');\r\n\t\t\tif (index === prevIndex) return;\r\n\t\t\tthis.handleClick(index);\r\n\t\t\tprevIndex = index;\r\n\t\t});\r\n\t\tif (window.innerWidth < 600) {\r\n\t\t\t[cols, rows] = [17, 31];\r\n\t\t\tconst initAllEmpty: gridSquareState[] = [];\r\n\t\t\tfor (let i = 0; i < rows * cols; i++) {\r\n\t\t\t\tinitAllEmpty[i] = 'empty';\r\n\t\t\t}\r\n\t\t\tthis.setState({ board: initAllEmpty });\r\n\t\t}\r\n\t}\r\n\r\n\thandleMouseOver = (index: number): void => {\r\n\t\tif (!this.state.mousedown || this.state.squareTypeSelection.match(/start|end/) || this.state.isWorking) return;\r\n\r\n\t\tthis.updateBoard(index, this.state.squareTypeSelection);\r\n\t};\r\n\r\n\tupdateBoard = (index: number, value: gridSquareState): void => {\r\n\t\tthis.setState({\r\n\t\t\tboard: this.state.board.map((square, i) => (\r\n\t\t\t\tindex === i ? value : square\r\n\t\t\t)),\r\n\t\t});\r\n\t}\r\n\r\n\tupdateBatch = (indexes: number[], value: gridSquareState): void => {\r\n\t\tthis.setState({\r\n\t\t\tboard: this.state.board.map((square, i) => (\r\n\t\t\t\tindexes.includes(i) ? value : square\r\n\t\t\t)),\r\n\t\t});\r\n\t}\r\n\r\n\thandleClick = (index: number): void => {\r\n\t\tif (this.state.isWorking) return;\r\n\t\tthis.setState({\r\n\t\t\tboard: this.state.board.map((square, i) => {\r\n\t\t\t\tlet newSquare = square;\r\n\t\t\t\tif (this.state.squareTypeSelection === 'start' && square === 'start' && index !== i) newSquare = 'empty';\r\n\t\t\t\tif (this.state.squareTypeSelection === 'end' && square === 'end' && index !== i) newSquare = 'empty';\r\n\t\t\t\tif (square === 'visited' || square === 'path') newSquare = 'empty';\r\n\t\t\t\tif (index === i) newSquare = this.state.squareTypeSelection;\r\n\t\t\t\treturn newSquare;\r\n\t\t\t}),\r\n\t\t});\r\n\t}\r\n\r\n\thandleOptionChange = (target: HTMLInputElement): void => {\r\n\t\tthis.setState({\r\n\t\t\tsquareTypeSelection: target.value,\r\n\t\t});\r\n\t}\r\n\r\n\t// end react functions and begin pathfinding functions\r\n\r\n\treconstructPath = (cameFrom: Map<number, number>, current: number): void => {\r\n\t\tconst totalPath = [current];\r\n\t\twhile (cameFrom.has(current)) {\r\n\t\t\tconst potentialCurrent = cameFrom.get(current);\r\n\t\t\tif (potentialCurrent !== undefined) current = potentialCurrent;\r\n\t\t\ttotalPath.push(current);\r\n\t\t}\r\n\t\ttotalPath.splice(totalPath.indexOf(this.state.board.indexOf('start')), 1);\r\n\t\ttotalPath.splice(totalPath.indexOf(this.state.board.indexOf('end')), 1);\r\n\t\tthis.updateBatch(totalPath, 'path');\r\n\t}\r\n\r\n\tclearWalls = (): void => {\r\n\t\tif (this.state.isWorking) return;\r\n\t\tthis.setState({\r\n\t\t\tboard: this.state.board.map(() => (\r\n\t\t\t\t'empty'\r\n\t\t\t)),\r\n\t\t});\r\n\t}\r\n\r\n\tstartPathfind = (type: 0 | 1): void => {\r\n\t\tif (this.state.isWorking) return;\r\n\t\tthis.setState({ isWorking: true });\r\n\t\tthis.setState({\r\n\t\t\tboard: this.state.board.map((square) => (\r\n\t\t\t\tsquare === 'visited' || square === 'path' ? 'empty' : square\r\n\t\t\t)),\r\n\t\t});\r\n\t\tconst board = this.state.board;\r\n\t\tconst start = board.indexOf('start');\r\n\t\tconst end = board.indexOf('end');\r\n\t\tif (end === -1 || start === -1) {\r\n\t\t\tthis.setState({ isWorking: false });\r\n\t\t\twindow.alert('please choose a start and end tile');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst openSet: number[] = [];\r\n\t\topenSet.push(start);\r\n\t\tconst closedSet: number[] = [];\r\n\r\n\t\tconst cameFrom = new Map();\r\n\r\n\t\tconst gScore = new MapWithDefault<number, number>(Infinity);\r\n\t\tgScore.set(start, 0);\r\n\t\tconst fScore = new MapWithDefault<number, number>(Infinity);\r\n\t\tfScore.set(start, getH(start, end) * type);\r\n\r\n\t\tconst intervalKey = window.setInterval(() => {\r\n\t\t\tif (openSet.length === 0) {\r\n\t\t\t\twindow.clearInterval(intervalKey);\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\twindow.alert('no possible path');\r\n\t\t\t\t}, 500);\r\n\t\t\t\tthis.setState({ isWorking: false });\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet current = -1;\r\n\t\t\topenSet.forEach(square => {\r\n\t\t\t\tif (fScore.get(current) > fScore.get(square)) current = square;\r\n\t\t\t});\r\n\r\n\t\t\tif (current === end) {\r\n\t\t\t\tthis.setState({ isWorking: false });\r\n\t\t\t\twindow.clearInterval(intervalKey);\r\n\t\t\t\tthis.reconstructPath(cameFrom, current);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\topenSet.splice(openSet.indexOf(current), 1);\r\n\r\n\t\t\tif (!board[current]?.match(/wall|start|end/)) this.updateBoard(current, 'visited');\r\n\t\t\tclosedSet.push(current);\r\n\r\n\t\t\tgetNeighbors(current).forEach(neighbor => {\r\n\t\t\t\tif (board[neighbor] === 'wall' || neighbor === -1) return;\r\n\r\n\t\t\t\tconst tentative_gScore = gScore.get(current) + 1;\r\n\r\n\t\t\t\tif (closedSet.includes(neighbor) && tentative_gScore >= gScore.get(neighbor)) return;\r\n\r\n\t\t\t\tif (!openSet.includes(neighbor) || tentative_gScore <= gScore.get(neighbor)) {\r\n\t\t\t\t\tcameFrom.set(neighbor, current);\r\n\t\t\t\t\tgScore.set(neighbor, tentative_gScore);\r\n\t\t\t\t\tfScore.set(neighbor, gScore.get(neighbor) + getH(neighbor, end) * type);\r\n\t\t\t\t\tif (!openSet.includes(neighbor)) {\r\n\t\t\t\t\t\topenSet.push(neighbor);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}, 50);\r\n\r\n\t}\r\n\r\n\tmazeRecursiveBacktracker = (): void => {\r\n\t\tif (this.state.isWorking) return;\r\n\t\tthis.setState({ isWorking: true });\r\n\t\t// Choose the initial cell, mark it as visited and push it to the stack\r\n\t\tconst stack: number[] = [];\r\n\t\tconst visited: number[] = [];\r\n\r\n\t\tconst maze: number[] = [];\r\n\t\tfor (let i = 0; i < rows * cols; i++) {\r\n\t\t\tconst { x, y } = listToTwoD(i);\r\n\t\t\tif (!(y % 2 === 0 || x % 2 === 0)) maze.push(i);\r\n\t\t}\r\n\t\tthis.setState({ board: this.state.board.map(() => 'wall') });\r\n\t\tconst initial = maze[Math.floor(Math.random() * maze.length)];\r\n\r\n\t\tstack.push(initial);\r\n\t\tvisited.push(initial);\r\n\r\n\t\t// While the stack is not empty\r\n\t\tconst intervalKey = window.setInterval(() => {\r\n\t\t\tif (stack.length === 0) {\r\n\t\t\t\tthis.setState({ isWorking: false });\r\n\t\t\t\twindow.clearInterval(intervalKey);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Pop a cell from the stack and make it a current cell\r\n\t\t\tconst current = stack.pop();\r\n\t\t\tif (current === undefined) return;\r\n\r\n\t\t\t// If the current cell has any neighbours which have not been visited\r\n\t\t\tlet mazeNeighbors = getMazeNeighbors(current);\r\n\t\t\tmazeNeighbors = mazeNeighbors.filter(mazeNeighbor => !visited.includes(mazeNeighbor));\r\n\r\n\t\t\tif (mazeNeighbors.length === 0) {\r\n\t\t\t\t// instead of visualizing the whole stack on each frame, just update the needed squares\r\n\t\t\t\twindow.setTimeout(() => this.updateBatch(getNeighbors(current).filter((square) => this.state.board[square] === 'visited'), 'empty'), 50);\r\n\t\t\t\tthis.updateBoard(current, 'empty');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.updateBoard(current, 'visited');\r\n\r\n\t\t\t// Push the current cell to the stack\r\n\t\t\tstack.push(current);\r\n\r\n\t\t\t// Choose one of the unvisited neighbours\r\n\t\t\tconst chosen = mazeNeighbors[Math.floor(Math.random() * mazeNeighbors.length)];\r\n\r\n\t\t\t// Remove the wall between the current cell and the chosen cell\r\n\t\t\tconst currentWalls = getNeighbors(current);\r\n\t\t\tconst chosenWalls = getNeighbors(chosen);\r\n\t\t\tchosenWalls.forEach(wall => {\r\n\t\t\t\tif (currentWalls.includes(wall)) window.setTimeout(() => this.updateBoard(wall, 'visited'), 50);\r\n\t\t\t});\r\n\r\n\t\t\t// Mark the chosen cell as visited and push it to the stack\r\n\t\t\tstack.push(chosen);\r\n\t\t\tvisited.push(chosen);\r\n\t\t}, 100);\r\n\t}\r\n\r\n\trender(): JSX.Element {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div className='navbar'>\r\n\t\t\t\t\t<form>\r\n\t\t\t\t\t\t<label className=\"container\">Wall\r\n\t\t\t\t\t\t\t<input type='radio' value='wall' checked={this.state.squareTypeSelection === 'wall'} onChange={(e) => this.handleOptionChange(e.target)} />\r\n\t\t\t\t\t\t\t<span className=\"checkmark cWall\"></span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<label className=\"container\">Erase\r\n\t\t\t\t\t\t\t<input type='radio' value='empty' checked={this.state.squareTypeSelection === 'empty'} onChange={(e) => this.handleOptionChange(e.target)} />\r\n\t\t\t\t\t\t\t<span className=\"checkmark cErase\"></span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<label className=\"container\">Start\r\n\t\t\t\t\t\t\t<input type='radio' value='start' checked={this.state.squareTypeSelection === 'start'} onChange={(e) => this.handleOptionChange(e.target)} />\r\n\t\t\t\t\t\t\t<span className=\"checkmark cStart\"></span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<label className=\"container\">End\r\n\t\t\t\t\t\t\t<input type='radio'value='end' checked={this.state.squareTypeSelection === 'end'} onChange={(e) => this.handleOptionChange(e.target)} />\r\n\t\t\t\t\t\t\t<span className=\"checkmark cEnd\"></span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t\t<button className='btn' onClick={() => this.startPathfind((1))}>Run A*</button>\r\n\t\t\t\t\t<button className='btn' onClick={() => this.startPathfind((0))}>Run Dijkstras</button>\r\n\t\t\t\t\t<button className='btn' onClick={() => this.clearWalls()}>Clear Grid</button>\r\n\t\t\t\t\t<button className='btn' onClick={() => this.mazeRecursiveBacktracker()}>Generate Maze</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='grid' ref={this.grid}>\r\n\t\t\t\t\t{this.state.board.map((square, index) => (\r\n\t\t\t\t\t\t<Square type={square} handleMouseOver={this.handleMouseOver} handleClick={this.handleClick} index={index} key={index}/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</>);\r\n\t}\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport PathfindingVis from './PathfindingVis';\n\nexport default function App(): JSX.Element {\n\treturn (\n\t\t<main>\n\t\t\t<PathfindingVis />\n\t\t</main>\n\t);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n"],"sourceRoot":""}